# %%
import torch 
import torchvision
from torchvision import datasets
from torch.utils.data import DataLoader,Dataset
from torchvision.transforms import ToTensor
from torchvision import transforms
import torch.nn as nn

# %%
device = 'cuda' if torch.cuda.is_available() else 'cpu'

# %%
# transform_func = transforms.Compose([ToTensor()])

# %%
train_fmnist = datasets.FashionMNIST(root='data',train=True,download=True,transform=ToTensor())
test_fmnist = datasets.FashionMNIST(root='data',train=False,transform=ToTensor())

# %%
test_fmnist.data[0].shape

# %%
train_dataloader = DataLoader(train_fmnist,batch_size=64)
test_dataloader = DataLoader(test_fmnist,batch_size=64)

# %%
class simple_model(nn.Module):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.flatten = nn.Flatten()
        self.stack = nn.Sequential(
            nn.Conv2d(in_channels=1,out_channels=32,kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Flatten(),
            nn.Linear(32*13*13,10))
    def forward(self,x):
        # x = self.flatten(x)
        x = self.stack(x)
        return x
        

# %%
model = simple_model().to(device)

# %%
#hyperparamaters
epochs = 2
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(),lr=1e-04)

# %%
pred.squeeze(0).shape

# %%
train_losses,test_losses = [],[]
train_accs,test_accs =[],[]
for epoch in range(epochs):
    for batch,(x,y) in enumerate(train_dataloader):
        train_loss=0
        model.train()
        x,y = x.to(device),y.to(device)
        pred = model(x)
        loss = loss_fn(pred.squeeze(0),y)
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        train_loss += loss.item()
    epoch_train_loss = train_loss/len(train_dataloader)
    train_losses.append(epoch_train_loss)
    print(f'Training loss for epoch {epoch}: {epoch_train_loss}')
    
    with torch.no_grad():
        for batch,(x,y) in enumerate(test_dataloader):
            test_loss,test_acc=0,0
            model.eval()
            x,y = x.to(device),y.to(device)
            test_pred = model(x)
            loss = loss_fn(pred,y)
            test_loss += loss.item()
            test_acc += ((y==test_pred.argmax(dim=1)).sum().item())/len(y)
        epoch_test_loss = train_loss/len(test_dataloader)
        epoch_acc = test_acc/len(test_dataloader)
        test_losses.append(epoch_test_loss)
        test_accs.append(epoch_acc)
        
        print(f'Training loss for epoch {epoch}: {epoch_test_loss} and test accuracy is {epoch_acc}')
            
    
#Testing loop


# %%



